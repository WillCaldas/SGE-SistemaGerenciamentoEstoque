@page "/purchase"

@attribute [Authorize]

@inject IProduceProductUseCase ProduceProductUseCase

@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

@using SGE.WebApp.ViewModels
<h3>Compra Estoque</h3>
<br/>

@if (purchaseViewModel != null)
{
    <EditForm Model="purchaseViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for=po>Ordem de Compra</label>
            <InputText id="po" @bind-Value="purchaseViewModel.PurchaseOrder" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="inv">Estoque para comprar</label>
            <ViewInventoriesComponent 
                OnSelectInventory="OnSelectInventory"
                DisplaySearchResult="true"
            ></ViewInventoriesComponent>
            <InputText id="inv" class="form-control" @bind-Value="purchaseViewModel.InventoryName" disabled></InputText>
            <input type="hidden" value="@purchaseViewModel?.InventoryId" />
            @if (selectedInventory != null)
            {
                <text>Preço:</text>
                @selectedInventory?.Price.ToString("c")
            }
            
        </div>
        <div class="form-group">
            <label for="qty">Quantidade</label>
            <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
        </div>
        <br/>
        <button type="submit" class="btn btn-success">Comprar</button>

    </EditForm>
}

@code {
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();
    private Inventory? selectedInventory;

    private void OnSelectInventory(Inventory inv)
    {
        this.selectedInventory = inv;
        purchaseViewModel.InventoryId = inv.InventoryId;
        purchaseViewModel.InventoryName = inv.InventoryName;
    }

    private async Task OnValidSubmit()
    {
        await PurchaseInventoryUseCase.ExecuteAsync(
            this.purchaseViewModel.PurchaseOrder,
            this.selectedInventory,
            this.purchaseViewModel.QuantityToPurchase,
            "Claudio" //vamos deixar assim por enquanto, depois o substituiremos quando implementarmos o login
        );

        this.purchaseViewModel = new PurchaseViewModel();
        this.selectedInventory = null;
    }
}



 