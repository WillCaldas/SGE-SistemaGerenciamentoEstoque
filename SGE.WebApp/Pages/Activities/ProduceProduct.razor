
@page "/produce"

@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase ValidateEnoughInventoriesForProducingUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
<h3>Produzir Produtos</h3>
<br />

@if (produceViewModel != null)
{
    <EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for=po>Numero de produção</label>
            <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="inv">Produtos para Produzir</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct"
                                  DisplaySearchResult="true"></ViewProductsComponent>
            <InputText id="inv" class="form-control" @bind-Value="produceViewModel.ProductName" disabled></InputText>
            <input type="hidden" value="@produceViewModel?.ProductId" />
            @if (selectedProduct != null)
            {
                <text>Preço:</text>
                @selectedProduct?.Price.ToString("c")
            }

        </div>
        <div class="form-group">
            <label for="qty">Quantidade</label>
            <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
        </div>
        <br/>
        <button type="submit" class="btn btn-success">Produzir</button>

    </EditForm>
}

@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product selectedProduct;
    private string errorMessage;

    private async Task OnValidSubmit()
    {
        if(!await ValidateEnoughInventoriesForProducingUseCase.ExecuteAsync(this.selectedProduct, this.produceViewModel.QuantityToProduce))
        {
            errorMessage = $"Os estoques não são suficientes para produzir {this.produceViewModel.QuantityToProduce}x {this.selectedProduct.ProductName}!";
            return;
        }
        else
        {
            errorMessage = string.Empty;
        }

        await ProduceProductUseCase.ExecuteAsync(
            this.produceViewModel.ProductionNumber,
            this.selectedProduct,
            this.produceViewModel.QuantityToProduce,
            "Frank Castle"
        );

        this.produceViewModel = new ProduceViewModel();
        this.selectedProduct = null;
        this.errorMessage = string.Empty;
    }

    public void OnSelectProduct(Product prod)
    {
        this.selectedProduct = prod;
        produceViewModel.ProductId = prod.ProductId;
        produceViewModel.ProductName = prod.ProductName;
    }
}

