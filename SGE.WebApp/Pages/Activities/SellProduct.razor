@page "/sell"

@inject ISellProductUseCase SellProductUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
<h3>Venda de Produtos</h3>
<br/>

@if (sellViewModel != null)
{
    <EditForm Model="sellViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for=po>Ordem de venda</label>
            <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="inv">Produto para Venda</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct"
                                  DisplaySearchResult="true"></ViewProductsComponent>
            <InputText id="inv" class="form-control" @bind-Value="sellViewModel.ProductName" disabled></InputText>
            <input type="hidden" value="@sellViewModel?.ProductId" />
        </div>
        <div class="form-group">
            <label for="price">Preço</label>
            <InputNumber id="price" @bind-Value="sellViewModel.ProductPrice" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="qty">Quantidade</label>
            <InputNumber id="qty" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-success">Comprar</button>

    </EditForm>
}

@code {
    private SellViewModel sellViewModel = new SellViewModel();
    private Product selectedProduct;
    private string errorMessage;

    private void OnValidSubmit()
    {
        if (this.selectedProduct.Quantity < this.sellViewModel.QuantityToSell)
        {
            this.errorMessage = $"A quantidade do produto não é suficiente. Apenas {this.selectedProduct.Quantity} estão disponíveis.";
            
            return;
        }
        else
        {
            this.errorMessage = string.Empty;
        }

        SellProductUseCase.ExecuteAsync(
            this.sellViewModel.SalesOrderNumber,
            this.selectedProduct,
            this.sellViewModel.QuantityToSell,
            "Frank"
        );

        this.sellViewModel = new SellViewModel();
        this.selectedProduct = null;
        this.errorMessage = string.Empty;
    }

    private void OnSelectProduct(Product prod)
    {
        this.selectedProduct = prod;
        sellViewModel.ProductId = prod.ProductId;
        sellViewModel.ProductName = prod.ProductName;
        sellViewModel.ProductPrice = prod.Price;
    }
}

