@using SGE.CoreBusiness
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase

<div class="input-group mb-3">
    <input type="text"
           class="form-control form-control-lg"
           placeholder="Digite o produto aqui para pesquisar"
           @bind-value="productNameToSearch" 
           @bind-value:event="oninput"
           />
    <button type="button" class="input-group-text btn-success"
            @onclick="@( async()=> { await ViewProducts(); } )">
        Ver
    </button>
</div>
@if (this.DisplaySearchResult && _product != null && selectedProduct == null)
{
    <div style="overflow-y:auto; max-height:300px; border:1px solid silver; padding-top:5px">
        <ul style="list-style-type:none">
            @foreach(var inv in _product)
            {
                <li style="cursor:pointer" 
                @onclick="@(async() => {await SelectProduct(inv); })" 
                @key="inv.ProductId">@inv.ProductName</li>
            }
        </ul>
    </div>
}

@code {
    private string? _productNameToSearch;
    public string productNameToSearch { 
        get => _productNameToSearch;
        set
        {
            _productNameToSearch = value;
            if (!string.IsNullOrWhiteSpace(_productNameToSearch) &&
                _productNameToSearch.Length > 2)
            {
                ViewProducts();
            }
        }
    }

    private List<Product>? _product;
    private Product? selectedProduct;

    [Parameter]
    public EventCallback<List<Product>> OnSearchProducts { get; set; }

    [Parameter]
    public bool DisplaySearchResult { get; set; } = false;

    [Parameter]
    public EventCallback<Product> OnSelectProduct { get; set; }  

    private async Task ViewProducts()
    {
        var products = (await ViewProductsByNameUseCase
            .ExecuteAsync(productNameToSearch ?? string.Empty))?.ToList();

        await OnSearchProducts.InvokeAsync(products);
        _product = products;
        this.selectedProduct = null;

        StateHasChanged();
    }

    public async Task SelectProduct(Product prod)
    {
        await OnSelectProduct.InvokeAsync(prod);
        selectedProduct = prod;
    }
}

